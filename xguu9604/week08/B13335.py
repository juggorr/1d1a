import sys
sys.stdin = open('input_B13335.txt')
from collections import deque

'''
트럭은 문제 이해에 난항을 겪은 문제
덱의 로테이트를 처음으로 사용해본 문제
로테이트는 생각보다 유용했다!
다리 -->  도착 지점 [0, 0, 0, 0, 0] 트럭 출발 지점
'''

# 트럭의 수, 다리의 길이, 다리가 버틸 수 있는 최대 하중
n, w, L = map(int, input().split())
# 트럭을 굳이 덱으로 받을 이유는 없지만 선언한 김에 덱으로
trucks = deque(list(map(int, input().split())))
# 다리를 기준으로 로테이트를 사용할 예정이라 다리는 무적권 덱으로
bridge = deque([0]*w)
# 트럭이 움직이는 시간을 카운팅
time = 0
# 트럭이 전부 출발할때까지 반복을 진행하자
while trucks:
    # 만약 다리의 끝에 트럭이 와 있다면
    # 트럭 하나가 다리를 다 건넜다는 의미
    if bridge[0]:
        # 트럭이 밖으로 나갔다는 표시해주고
        bridge[0] = 0
        # 모든 트럭들을 한칸 앞으로 이동
        bridge.rotate(-1)
    # 아직 트럭이 끝으로 오지 않았다면
    else:
        # 트럭을 한칸씩 앞으로 이동시키기
        bridge.rotate(-1)
    # 트럭이 한칸씩 이동했으니 새로운 트럭이 들어올 공간이 생긴다
    # 이때 새로 들어올 트럭의 무게와 다리위에 있는 트럭의 무게가 다리가 버틸 수 있는 무게이면
    if sum(bridge)+trucks[0] <= L:
        # 대기하는 트럭중에 맨 앞의 트럭을 다리 위에 올려놓기
        bridge[-1] = trucks.popleft()
    # 위의 과정을 한번 하고 나면 모든 트럭이 움직인 것이므로 시간 +1
    time += 1
# 위의 반복을 다 지나오면 대기하는 트럭은 없다는 의미
# 이제 다리 위에 있는 트럭만 다리를 건너면 모든 트럭이 다리를 건넜다는 의미
# 다리위의 트럭이 전부 빠져나갈때까지 반복을 돌리자
while sum(bridge):
    # 다리 끝에 트럭이 오면 트럭을 빼내고 한칸씩 돌려주기
    if bridge[0]:
        bridge[0] = 0
        bridge.rotate(-1)
    # 아직 없다면 그냥 한칸씩 돌려주기
    else:
        bridge.rotate(-1)
    # 트럭들 한칸씩 이동했으므로 +1
    time += 1
# 위의 반복이 끝나면 다리 위의 트럭들도 모두 다리를 건넜다는 의미
# 지금까지 반복하면서 세어준 시간을 출력
print(time)


